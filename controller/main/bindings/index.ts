/**
 * This file was generated by this project's reflection framework.
 * Don't edit it manually. 
 */

/**
 * Generated binding.
 * An additive compositor composites other effects together using additive blending.
 */
export type AdditiveCompositorEffect = { 
/**
 * The effects to be composited together. The output of every effect will be added together.
 */
effects: Array<AnyEffect> };

/**
 * Generated binding.
 * Tagged with "type".
 * A wrapper for any effect that can be rendered.
 * Used for serialization and deserialization.
 */
export type AnyEffect = { "type": "AdditiveCompositor" } & AdditiveCompositorEffect | { "type": "AlphaCompositor" } & AlphaCompositorEffect | { "type": "Stripe" } & StripeEffect | { "type": "MusicVisualizer" } & MusicVisualizerEffect | { "type": "Rotate" } & RotateEffect | { "type": "FlashingColor" } & FlashingColorEffect | { "type": "SolidColor" } & SolidColorEffect | { "type": "WebsocketInput" } & WebsocketInputEffect | { "type": "NodeEditorEffect" } & NodeEditorEffect;

/**
 * Generated binding.
 * An alpha compositor composites other effects together using alpha blending.
 */
export type AlphaCompositorEffect = { 
/**
 * The effects to be composited together. The output of every effect will be composited based on their order and transparency.
 */
effects: Array<AnyEffect> };

/**
 * Generated binding.
 * The stripes effect renders a pattern with stripes of color. To make the stripes move, a rotate effect may be used.
 */
export type StripeEffect = { 
/**
 * The width of each stripe in pixels.
 */
stripe_width: number, 
/**
 * The colors of the stripes.
 */
stripe_colors: Array<PixelColor> };

/**
 * Generated binding.
 * A pixel is a single unit of color data with an alpha value.
 */
export type PixelColor = { r: number, g: number, b: number, alpha: number };

/**
 * Generated binding.
 * The music visualizer effect runs a TCP socket server that listens for
 * audio data from the music visualizer client. Then, it renders the audio
 * data as a visualizer.
 */
export type MusicVisualizerEffect = { 
/**
 * The UDP listener that listens for audio data from the music visualizer client.
 */
port: number };

/**
 * Generated binding.
 */
export type RotateEffect = { 
/**
 * The effect to rotate
 */
effect: AnyEffect, 
/**
 * The number of pixels to rotate the frame by. If negative, it rotates to the left.
 */
rotation: AnyExpression };

/**
 * Generated binding.
 * Tagged with "type".
 * A wrapper for any expression.
 * Used for serialization and deserialization.
 */
export type AnyExpression = { "type": "Number" } & LiteralExpression | { "type": "CurrentTime" } & CurrentTimeExpression | { "type": "Add" } & AddExpression | { "type": "Subtract" } & SubtractExpression | { "type": "Multiply" } & MultiplyExpression | { "type": "Divide" } & DivideExpression | { "type": "Round" } & RoundExpression | { "type": "Floor" } & FloorExpression | { "type": "Ceil" } & CeilExpression;

/**
 * Generated binding.
 * A constant value.
 */
export type LiteralExpression = { value: number };

/**
 * Generated binding.
 * Gets the current time in seconds.
 */
export type CurrentTimeExpression = {  };

/**
 * Generated binding.
 */
export type AddExpression = { left: AnyExpression, right: AnyExpression };

/**
 * Generated binding.
 */
export type SubtractExpression = { left: AnyExpression, right: AnyExpression };

/**
 * Generated binding.
 */
export type MultiplyExpression = { left: AnyExpression, right: AnyExpression };

/**
 * Generated binding.
 */
export type DivideExpression = { left: AnyExpression, right: AnyExpression };

/**
 * Generated binding.
 */
export type RoundExpression = { number: AnyExpression };

/**
 * Generated binding.
 */
export type FloorExpression = { number: AnyExpression };

/**
 * Generated binding.
 */
export type CeilExpression = { number: AnyExpression };

/**
 * Generated binding.
 */
export type FlashingColorEffect = { 
/**
 * The offset of the flashing effect, in seconds.
 */
offset: number, 
/**
 * The speed of the flashing effect, in Hz.
 */
speed: number, 
/**
 * The color of the first flashing color.
 */
color_a: PixelColor, 
/**
 * The color of the second flashing color.
 */
color_b: PixelColor };

/**
 * Generated binding.
 */
export type SolidColorEffect = { 
/**
 * The color to make every pixel.
 */
color: PixelColor, 
/**
 * The start pixel index.
 */
start: number, 
/**
 * The stop pixel index.
 */
stop: number };

/**
 * Generated binding.
 */
export type WebsocketInputEffect = {  };

/**
 * Generated binding.
 * An effect that renders a frame based on a node-based graphical editor.
 * This is by far the most complex effect type, as it allows for arbitrary
 * calculations for every pixel in the frame.
 */
export type NodeEditorEffect = { nodes: { [key in string]?: Node } };

/**
 * Generated binding.
 */
export type Node = { id: string, implementation: AnyNodeImplementation, inputs: Array<[string, number]>, last_frame_rendered: number };

/**
 * Generated binding.
 * Tagged with "type".
 */
export type AnyNodeImplementation = { "type": "LiteralNode" } & LiteralNode;

/**
 * Generated binding.
 */
export type LiteralNode = { value: Value };

/**
 * Generated binding.
 * Tagged with "type".
 */
export type Value = { "type": "Float" } & number | { "type": "Integer" } & number | { "type": "Color" } & PixelColor | { "type": "Boolean" } & boolean | { "type": "Frame" } & Frame;

/**
 * Generated binding.
 * A frame is a single set of pixel data.
 */
export type Frame = { pixel_data: Array<PixelColor> };

/**
 * Generated binding.
 * Tagged with "type".
 * A wrapper for any temporary effect that can be rendered.
 * Used for serialization and deserialization.
 */
export type AnyTemporaryEffect = { "type": "TemporaryEffectWrapper" } & DurationTemporaryEffect;

/**
 * Generated binding.
 */
export type DurationTemporaryEffect = { duration: number, effect: AnyEffect };

